<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Stratego on socket.io</title>
	<style type="text/css">
		#background {
			position: absolute;
			border: 1px solid blue;
		}

		#game {
			position: relative;
			border: 1px solid grey;
		}
	</style>
</head>

<script src="/socket.io/socket.io.js"></script>

<body>

	<div id="container" style="display: table-row">
		<div id="left" style="display: table-cell">
			<div id="background">
				<canvas id="board"><canvas>
			</div>
			<div id="game">
				<canvas id="gameCanvas"><canvas>
			</div>
		</div>
		<div id="right" style="display: table-cell;">
			<ul id="list"></ul>
		</div>		
	</div>

  	<script type="text/javascript">

	const Colors = {
		red: 'OrangeRed',
		blue: 'MediumTurquoise',
		terrain: '#229954',
		terrain_highlight: '#3bb16d'
	};

	const Figures = {
		bomb: {
			name: 'Bomb',
			label: 'ðŸ’£',
			rate: 100,
			color: null
		},
		flag: {
			name: 'Flag',
			label: 'ðŸš©',
			rate: 0,
			color: 'orange',
			isFigure: true,
			canMove: false
		},
		spy: {
			name: 'Spy',
			label: '1',
			rate: 1,
			color: null,
			isFigure: true,
			canMove: true,
			steps: 1
		},
		scout: {
			name: 'Scout',
			label: '2',
			rate: 2,
			color: null,
			isFigure: true,
			canMove: true,
			steps: 10
		},
		miner: {
			name: 'Miner',
			label: '3',
			rate: 3,
			color: null,
			isFigure: true,
			canMove: true,
			steps: 1
		},
		sergeant: {
			name: 'Sergeant',
			label: '4',
			rate: 4,
			color: null,
			isFigure: true,
			canMove: true,
			steps: 1
		},
		lieutenant: {
			name: 'Lieutenant',
			label: '5',
			rate: 5,
			color: null,
			isFigure: true,
			canMove: true,
			steps: 1
		},
		captain: {
			name: 'Captain',
			label: '6',
			rate: 6,
			color: null,
			isFigure: true,
			canMove: true,
			steps: 1
		},
		major: {
			name: 'Major',
			label: '7',
			rate: 7,
			color: null,
			isFigure: true,
			canMove: true,
			steps: 1
		},
		colonel: {
			name: 'Colonel',
			label: '8',
			rate: 8,
			color: null,
			isFigure: true,
			canMove: true,
			steps: 1
		},
		general: {
			name: 'General',
			label: '9',
			rate: 9,
			color: null,
			isFigure: true,
			canMove: true,
			steps: 1
		},
		marshall: {
			name: 'Marshall',
			label: '10',
			rate: 10,
			color: null,
			isFigure: true,
			canMove: true,
			steps: 1
		},
		ground: {
			name: 'Ground',
			label: '',
			rate: 0,
			color: Colors.terrain,
			isFigure: false,
			canMove: false
		},
		water: {
			name: 'Water',
			label: '',
			rate: 0,
			color: '#3498DB',
			isFigure: false,
			canMove: false
		}
	};

	const cellWidth = 50;

	class Terrain {
		constructor(name) {
			this.name = name.name;
			this.label = name.label;
			this.color = name.color;
		}
	}

	class Ground extends Terrain {}
	class Water extends Terrain {}

	class Figure {
		constructor(figure, color, hidden) {
			this.name = figure.name;
			this.label = figure.label;
			this.rate = figure.rate;
			this.color = color;
			this.isFigure = figure.isFigure;
			this.canMove = figure.canMove;
			this.steps = figure.steps;
			this.image = figure.image;
			this.hidden = hidden || false;
		}
	}

	let ground = new Ground(Figures.ground);

  	// init background board
	const board = [];
	for (let row = 0; row < 10; row++) {
		const boardRow = [];
	  	for (let col = 0; col < 10; col++) {
		  	boardRow.push({
				x: col * cellWidth, 
				y: row * cellWidth,
				figure: null
		  	});
		}
		board.push(boardRow);
	}

	const board_cnv = document.getElementById("board");

	const board_size_width = board[0].length * cellWidth;
	const board_size_height = board.length * cellWidth;
	board_cnv.width = board_size_width;
	board_cnv.height = board_size_height;
	
	const board_ctx = board_cnv.getContext("2d");
	
	// draw background board
	board.forEach(boardRow => {
		boardRow.forEach(boardCell => {
			boardCell.figure = ground;
			board_ctx.fillStyle = boardCell.figure.color;
			board_ctx.fillRect(boardCell.x, boardCell.y, cellWidth, cellWidth);
			board_ctx.strokeStyle = '#95A5A6';
			board_ctx.strokeRect(boardCell.x + 1, boardCell.y + 1, cellWidth - 1, cellWidth - 1);
		});
	});

	// init game board
	const game_cnv = document.getElementById("gameCanvas");
	const game_ctx = gameCanvas.getContext("2d");

	game_cnv.width = board_size_width;
	game_cnv.height = board_size_height;

	let bB = game_cnv.getBoundingClientRect();
	let offsetX = bB.left;
	let offsetY = bB.top;

	game_cnv.onmousedown = mouseClickDown;
	// game_cnv.onmouseup = myUp;
	// game_cnv.onmousemove = myMove;


	class Board {
		constructor() {
			this.boardState = null;
		}

		updateBoard(data) {
			data.forEach(boardRow => {
				boardRow.forEach(boardCell => {
					if (boardCell.highlight) {
						game_ctx.fillStyle = Colors.terrain_highlight;
						game_ctx.globalAlpha = 0.5;
						game_ctx.fillRect(boardCell.x + 2, boardCell.y + 2, cellWidth - 3, cellWidth - 3);
						game_ctx.globalAlpha = 1.0;
					}

					if (boardCell.figure && boardCell.figure.name === 'Water') {
						game_ctx.fillStyle = boardCell.figure.color;					
						game_ctx.fillRect(boardCell.x, boardCell.y, cellWidth, cellWidth);

					} else if (boardCell.figure) {
						game_ctx.beginPath();
						game_ctx.fillStyle = boardCell.figure.color;					
						game_ctx.roundRect(boardCell.x + 5, boardCell.y + 5, cellWidth - 10, cellWidth - 10, 5);
						game_ctx.fill();

						game_ctx.font = "bold 22px verdana, sans-serif";
						game_ctx.textAlign = "center";
						game_ctx.textBaseline = "middle";
						game_ctx.fillStyle = "DarkSlateGray";

						if (boardCell.figure.hidden) {
							game_ctx.fillText('?', boardCell.x + 24, boardCell.y + 24);	
						} else {
							game_ctx.fillText(boardCell.figure.label, boardCell.x + 24, boardCell.y + 24);	
						}
					}
				});
			});
		}

		getState() {
			return this.boardState;
		}

		setState(state) {
			this.boardState = state;
		}

		getClickedCell(mx, my) {
			socket.emit('getState');
			console.log(this.getState())

			for (const [row_index, boardRow] of this.getState().entries()) {
			  	for (const [col_index, boardCell] of boardRow.entries()) {
				  	if (mx > boardCell.x && mx < boardCell.x + cellWidth && my > boardCell.y && my < boardCell.y + cellWidth) {
						// console.log('getClickedCell:' + JSON.stringify(boardCell), col_index, row_index);
						console.log('getClickedCell:' + row_index, col_index);
						return ([row_index, col_index]);
					}
				}
			}
		}		
	}

	const playBoard = new Board();


	const socket = io();
	socket.on('initGame', function (data) {
		//console.log(data);
		playBoard.setState(data);
		playBoard.updateBoard(data);
	});
	socket.on('setState', function (data) {
		//console.log(data);
		playBoard.setState(data);
	});


	function mouseClickDown(e) {
		e.preventDefault();
		e.stopPropagation();

		let mx = parseInt(e.clientX - offsetX);
		let my = parseInt(e.clientY - offsetY);
		console.log('mouseClickDown: ' + mx, my);

		let clickedCellCoords = playBoard.getClickedCell(mx, my);

		if (playBoard.getClickedCoords === null && playBoard.isFigure(clickedCellCoords) === true) {
			playBoard.highlightCell(clickedCellCoords);
			playBoard.setClickedCoords = clickedCellCoords;
			let allowedMovements = playBoard.getAllowedMovement(clickedCellCoords);
			allowedMovements.forEach(cell => {
	  			playBoard.highlightCell(cell);
	  		});	
		} else if (playBoard.getClickedCoords !== null) {
			let allowedMovements = playBoard.getAllowedMovement(playBoard.getClickedCoords);
			if ( JSON.stringify(allowedMovements).includes(JSON.stringify(clickedCellCoords)) ) {
				let isAttackedFigure = playBoard.isFigure(clickedCellCoords);
				if (isAttackedFigure) {
					let attackedFigure = playBoard.getCellValue(clickedCellCoords);
					playBoard.showFigure(attackedFigure);
				}

				playBoard.moveFigureTo(clickedCellCoords);				
			}

			playBoard.resetHighlightCell();
			playBoard.setClickedCoords = null;
		}
		
		game_ctx.clearRect(0, 0, board_size_width, board_size_height);
		playBoard.updateBoard();
  	}	

	</script>

</body>
</html>